package fi.blaudoom.pentestgui;


import fi.blaudoom.pentestgui.dao.UserRepository;
import fi.blaudoom.pentestgui.service.user.UserService;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.web.SecurityFilterChain;

import javax.sql.DataSource;

@Configuration
@EnableWebSecurity
public class WebSecurityConfig {

    private final DataSource dataSource;

    private final UserRepository userDetailsService;

    private final UserService userService;


    private final CustomAuthenticationProvider authenticationProvider;

    public WebSecurityConfig(AuthenticationManagerBuilder builder,
                             DataSource dataSource,
                             UserRepository userDetailsService,
                             UserService userService, CustomAuthenticationProvider authenticationProvider)  throws Exception {
        this.dataSource = dataSource;
        this.userDetailsService = userDetailsService;
        this.userService = userService;
        this.authenticationProvider = authenticationProvider;

        //userService.saveNewUser("admin", "12341234", "12341234", "ADMIN");


    }

    @Bean
    public AuthenticationManager authManager(HttpSecurity http) throws Exception {
        AuthenticationManagerBuilder authenticationManagerBuilder =
                http.getSharedObject(AuthenticationManagerBuilder.class);
        authenticationManagerBuilder.authenticationProvider(authenticationProvider);
        return authenticationManagerBuilder.build();
    }

    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {

        http
                .authorizeHttpRequests((requests) -> requests
                        .requestMatchers("/**").permitAll()
                        .requestMatchers("/admin/**").hasRole("ADMIN"))
                        /*
                        .requestMatchers("/admin/**").hasRole("ADMIN")
                        .requestMatchers("/", "/home", "/images/**", "/assets/**", "/api/**", "/login",
                                "/reset/**").permitAll()
                        .anyRequest().authenticated()
                )*/
                .logout((logout) -> logout.permitAll().logoutSuccessUrl("/"))
                //.authenticationProvider(authenticationProvider)
                .formLogin((form) -> form
                        .loginPage("/login")
                        .permitAll()
                        .defaultSuccessUrl("/")
                );
        return http.build();
    }
}
