package com.gofore.hackademy;

import com.gofore.hackademy.dao.UserRepository;
import com.gofore.hackademy.service.UserService;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityCustomizer;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.web.SecurityFilterChain;
import org.thymeleaf.util.StringUtils;

import javax.sql.DataSource;

@Configuration
@EnableWebSecurity
public class WebSecurityConfig {

    private final DataSource dataSource;

    private final UserRepository userDetailsService;

    private final CustomAuthenticationProvider authenticationProvider;

    private final JwtTokenFilter jwtTokenFilter;

    private final UserService userService;

    public WebSecurityConfig(AuthenticationManagerBuilder builder,
                             DataSource dataSource,
                             UserRepository userDetailsService,
                             CustomAuthenticationProvider authenticationProvider,
                             JwtTokenFilter jwtTokenFilter, UserService userService)  throws Exception {
        this.dataSource = dataSource;
        this.userDetailsService = userDetailsService;
        this.authenticationProvider = authenticationProvider;
        this.jwtTokenFilter = jwtTokenFilter;
        this.userService = userService;

        userService.saveNewUser("admin", StringUtils.randomAlphanumeric(50), "", "ADMIN");
        userService.saveNewUser("hackerman", "",StringUtils.randomAlphanumeric(50), "USER");

    }

    @Bean
    public AuthenticationManager authManager(HttpSecurity http) throws Exception {
        AuthenticationManagerBuilder authenticationManagerBuilder =
                http.getSharedObject(AuthenticationManagerBuilder.class);
        authenticationManagerBuilder.authenticationProvider(authenticationProvider);
        return authenticationManagerBuilder.build();
    }

    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {

        http
                .authorizeHttpRequests((requests) -> requests
                        .requestMatchers("/user", "/course").authenticated()
                        .requestMatchers("/admin/**").hasRole("ADMIN")
                        .requestMatchers("/", "/home", "/images/**", "/assets/**", "/api/**", "/login",
                                "/reset/**").permitAll()
                        .anyRequest().authenticated()
                )
                .logout((logout) -> logout.permitAll().logoutSuccessUrl("/"))
                .authenticationProvider(authenticationProvider)
                .formLogin((form) -> form
                        .loginPage("/login")
                        .permitAll()
                        .defaultSuccessUrl("/")
                );
        return http.build();
    }

    @Configuration
    public class SecurityConfiguration {

        @Bean
        public WebSecurityCustomizer webSecurityCustomizer() {
            return (web) -> web.ignoring().requestMatchers("/api/**");
        }

    }


}
