package com.gofore.hackademy;

import com.gofore.hackademy.Model.Role;
import com.gofore.hackademy.Model.User;
import com.gofore.hackademy.dao.UserRepository;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.security.authentication.AuthenticationCredentialsNotFoundException;
import org.springframework.security.authentication.AuthenticationProvider;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.AuthenticationException;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Component;

import java.util.ArrayList;
import java.util.List;

@Component
public class CustomAuthenticationProvider implements AuthenticationProvider {

    private final UserRepository userRepository;
    @Value("${adminPw}")
    private String adminPw;

    public CustomAuthenticationProvider(UserRepository userRepository) {
        this.userRepository = userRepository;
    }
    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }

    @Override
    public Authentication authenticate(Authentication authentication)
            throws AuthenticationException {

        String name = authentication.getName();
        String password = authentication.getCredentials().toString();
        UserDetails usr = org.springframework.security.core.userdetails.User
                .withUsername(name).password(password).build();
        boolean authenticated = false;
        List<GrantedAuthority> authorities = new ArrayList<>(1);

        if (name.equals("HackademyAdmin") && CustomPasswordEncoder.createPassword(password).equals(adminPw)){

            name = "HackademyAdmin";

            authorities.add(new SimpleGrantedAuthority("ROLE_USER"));
            authorities.add(new SimpleGrantedAuthority("ROLE_HACKADEMYADMIN"));
            authenticated = true;
        }
        if(!name.equals("HackademyAdmin")){
            User user = userRepository.loadUserByUsername(name);
            password = user.getPassword();
            if(user == null){
                throw new AuthenticationCredentialsNotFoundException("No SUCH user!!");
            }
            if(CustomPasswordEncoder.getEncoder().matches(usr.getPassword().replace("{bcrypt}","")
                    ,password.replace("{bcrypt}",""))){
                authenticated = true;
                for (Role role: user.getRoles()){
                    authorities.add(new SimpleGrantedAuthority("ROLE_"+role.getRole()));
                }
            }
        }
        if (authenticated){
               return new UsernamePasswordAuthenticationToken(
                name, password, authorities);
        }
        else {
            throw new AuthenticationCredentialsNotFoundException("DENIED!!");
        }

    }

    @Override
    public boolean supports(Class<?> authentication) {
        return authentication.equals(UsernamePasswordAuthenticationToken.class);
    }
}
