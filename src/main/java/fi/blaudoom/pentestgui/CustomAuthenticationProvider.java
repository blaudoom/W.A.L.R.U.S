package fi.blaudoom.pentestgui;

import fi.blaudoom.pentestgui.dao.UserRepository;
import fi.blaudoom.pentestgui.model.Role;
import fi.blaudoom.pentestgui.model.User;
import org.springframework.security.authentication.AuthenticationCredentialsNotFoundException;
import org.springframework.security.authentication.AuthenticationProvider;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.AuthenticationException;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Component;

import java.util.ArrayList;
import java.util.List;

@Component
public class CustomAuthenticationProvider implements AuthenticationProvider {

    private final UserRepository userRepository;
    private PasswordEncoder passwordEncoder;

    public CustomAuthenticationProvider(UserRepository userRepository) {
        this.userRepository = userRepository;
        this.passwordEncoder = new BCryptPasswordEncoder();
    }

    @Override
    public Authentication authenticate(Authentication authentication)
            throws AuthenticationException {

        String name = authentication.getName();
        String password = authentication.getCredentials().toString();
        UserDetails usr = org.springframework.security.core.userdetails.User
                .withUsername(name).password(password).build();
        boolean authenticated = false;
        List<GrantedAuthority> authorities = new ArrayList<>(1);

        User user = userRepository.loadUserByUsername(name);
        password = user.getPassword();
        if (user == null) {
            throw new AuthenticationCredentialsNotFoundException("");
        }
        if (this.passwordEncoder.matches(usr.getPassword().replace("{bcrypt}", "")
                , password.replace("{bcrypt}", ""))) {
            authenticated = true;
            for (Role role : user.getRoles()) {
                authorities.add(new SimpleGrantedAuthority("ROLE_" + role.getRole()));
            }
        }

        if (authenticated) {
            return new UsernamePasswordAuthenticationToken(
                    name, password, authorities);
        } else {
            throw new AuthenticationCredentialsNotFoundException("DENIED!!");
        }

    }

    @Override
    public boolean supports(Class<?> authentication) {
        return authentication.equals(UsernamePasswordAuthenticationToken.class);
    }
}
