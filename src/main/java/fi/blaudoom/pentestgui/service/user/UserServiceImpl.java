package fi.blaudoom.pentestgui.service;

import fi.blaudoom.pentestgui.dao.RoleRepository;
import fi.blaudoom.pentestgui.dao.UserRepository;
import fi.blaudoom.pentestgui.model.User;
import fi.blaudoom.pentestgui.model.Role;
import jakarta.transaction.Transactional;
import org.springframework.context.ApplicationContext;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Service;


import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;
import java.util.stream.StreamSupport;
@Service
public class UserServiceImpl implements UserService {
    private final UserRepository userRepository;
    private final RoleRepository roleRepository;

    private BCryptPasswordEncoder passwordEncoder;

    private final ApplicationContext applicationContext;

    public UserServiceImpl(UserRepository userRepository, RoleRepository roleRepository,  ApplicationContext applicationContext) {
        this.userRepository = userRepository;
        this.roleRepository = roleRepository;
        this.applicationContext = applicationContext;
        this.passwordEncoder = new BCryptPasswordEncoder();
    }

    @Override
    public List<UserDto> listUsers(String searchTerm) {
        return StreamSupport.stream(userRepository.findAll().spliterator(), false)
                .map(c -> new UserDto(c.getId(),c.getUsername(),c.getEmail()))
                .collect(Collectors.toList());
    }

    @Override
    public UserDto getUserByUsername(String username) {
        Optional<User> user = userRepository.findByUsername(username).stream().findFirst();
        if (user.isPresent()){
            return new UserDto(user.get().getId(), user.get().getUsername(),user.get().getEmail());
        }
        return null;
    }

    @Override
    public UserDto getUserById(Long id) {
        Optional<User> user = userRepository.findById(id);
        if (user.isPresent()){
            return new UserDto(user.get().getId(), user.get().getUsername(),user.get().getEmail());
        }
        return null;
    }

    @Override
    public void changeUserPassword(String password) {
        User user = (User) SecurityContextHolder.getContext().getAuthentication().getPrincipal();
        userRepository.changeUserPassword(user.getId(), passwordEncoder.encode(password) );
    }

    @Override
    public void changeEmail(String email) {
        User user = (User) SecurityContextHolder.getContext().getAuthentication().getPrincipal();
        userRepository.changeEmail(user.getId(), email );
    }

    @Override
    @Transactional
    public void saveNewUser(String username, String password, String info, String highestRole) {
        User user = new User();
        user.setUserName(username);
        user.setPassword(passwordEncoder.encode(password));
        user.setEmail(username+"@random.com");
        Role highest = roleRepository.getRoleByRole(highestRole);
        Role userRole = roleRepository.getRoleByRole("USER");
        user.getRoles().add(highest);
        user.getRoles().add(userRole);
        userRepository.save(user);
    }
}
