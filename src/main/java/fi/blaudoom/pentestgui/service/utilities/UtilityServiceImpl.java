package fi.blaudoom.pentestgui.service;

import fi.blaudoom.pentestgui.util.ProcessStreamUtil;
import org.springframework.stereotype.Service;

import java.io.File;
import java.io.IOException;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

@Service
public class UtilityServiceImpl implements UtilityService {
    @Override
    public String runUtility(Long id) throws InterruptedException, IOException {
        ExecutorService executor = Executors.newFixedThreadPool(10);

        boolean isWindows = System.getProperty("os.name")
                .toLowerCase().startsWith("windows");

        StringBuffer response = new StringBuffer();

        ProcessBuilder builder = new ProcessBuilder();
        if (isWindows) {
            builder.command("cmd.exe", "/c", "dir");
        } else {
            builder.command("nmap", "localhost", "-sV");
        }
        builder.directory(new File(System.getProperty("user.home")));
        Process process = builder.start();
        ProcessStreamUtil streamGobbler =
                new ProcessStreamUtil(process.getInputStream());
        Future<?> future = executor.submit(streamGobbler);

        int exitCode = process.waitFor();
        String output = streamGobbler.getOutput().toString();
        //assertDoesNotThrow(() -> future.get(10, TimeUnit.SECONDS));
        assert(0 == exitCode);

        return output;
    }

    @Override
    public Integer addUtility(String path, Map<String, String> params) {
        return null;
    }

    @Override
    public List<UtilityDto> listUtilities() {
        return null;
    }
}
