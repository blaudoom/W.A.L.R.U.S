package fi.blaudoom.pentestgui.service.project;

import fi.blaudoom.pentestgui.dao.NmapScanRepository;
import fi.blaudoom.pentestgui.dao.TargetRepository;
import fi.blaudoom.pentestgui.model.Target;
import fi.blaudoom.pentestgui.model.TargetService;
import fi.blaudoom.pentestgui.service.project.dto.*;
import fi.blaudoom.pentestgui.service.utilities.UtilityServiceImpl;
import org.modelmapper.ModelMapper;
import org.springframework.data.crossstore.ChangeSetPersister;
import org.springframework.stereotype.Service;

import java.util.*;

@Service
public class TargetAccessServiceImpl implements TargetAccessService {

    private final TargetRepository targetRepository;
    private final ModelMapper modelMapper;

    private final NmapScanRepository nmapScanRepository;

    public TargetAccessServiceImpl(TargetRepository targetRepository, ModelMapper modelMapper, NmapScanRepository nmapScanRepository) {
        this.targetRepository = targetRepository;
        this.modelMapper = modelMapper;
        this.nmapScanRepository = nmapScanRepository;
    }

    /*TODO:
     *  Better DTO conversion.
     * Also sort in database. But would need to write new queries and not just use CrudRepo    */
    @Override
    public CumulativeTargetDto getTargetById(Long id) throws ChangeSetPersister.NotFoundException {
        Target target = targetRepository.findById(id).orElseThrow(ChangeSetPersister.NotFoundException::new);
        TargetDto targetDto = modelMapper.map(target, TargetDto.class);
        CumulativeTargetDto dto = new CumulativeTargetDto();
        Map<Integer, CumulativeTargetServiceDto> cumulativeTargetServiceDtoMap = new HashMap<>();

        dto.setHostname(targetDto.getHostname());
        dto.setDescription(targetDto.getDescription());
        dto.setHostnames(targetDto.getHostnames());
        dto.setId(targetDto.getId());
        dto.setProject(targetDto.getProject());
        dto.setIpAddress(targetDto.getIpAddress());
        dto.setState(targetDto.getState());
        dto.setInfo(targetDto.getInfo());

        for (TargetService service : target.getServices().stream().sorted().toList()) {
            CumulativeTargetServiceDto cumulativeTargetServiceDto = null;
            TargetServiceDto tempDto = modelMapper.map(service, TargetServiceDto.class);

            if (cumulativeTargetServiceDtoMap.containsKey(service.getPort())) {
                cumulativeTargetServiceDto = cumulativeTargetServiceDtoMap.get(service.getPort());
                cumulativeTargetServiceDto.getSeenOnScanId().add(new SeenOnScanDto(service.getSeenOnScan().getId(), service.getSeenOnScan().getProjectRunOrdinal()));
                tempDto.setSeenOnScanDto(new SeenOnScanDto(service.getSeenOnScan().getId(), service.getSeenOnScan().getProjectRunOrdinal()));
                cumulativeTargetServiceDto.getTargetServiceIterations().add(tempDto);
                if (cumulativeTargetServiceDto.getCpe() == null && service.getCpe() != null) {
                    cumulativeTargetServiceDto.setCpe(service.getCpe());
                }
                if (cumulativeTargetServiceDto.getServicefp() == null && service.getServicefp() != null) {
                    cumulativeTargetServiceDto.setServicefp(service.getServicefp());
                }
                List<ScriptResultDto> tempList = new ArrayList<>(cumulativeTargetServiceDto.getScriptResults());
                for (ScriptResultDto scriptResultDto : tempDto.getScriptResults()) {

                    if(!cumulativeTargetServiceDto.getScriptResults().stream().map(ScriptResultDto::getTitle).filter(scriptResultDto.getTitle()::equals).findFirst().isPresent()){
                        tempList.add(scriptResultDto);
                    }else {
                        tempList.stream().filter(scriptResultDto1
                                -> scriptResultDto1.getTitle().equals(scriptResultDto.getTitle())).findFirst()
                                .get().setContent(scriptResultDto.getContent());
                    }

                }

                cumulativeTargetServiceDto.setScriptResults(tempList);
            } else {
                cumulativeTargetServiceDto = new CumulativeTargetServiceDto();
                //Make a  method that replaces modelmapper call with a method call that only maps the fields we need


                tempDto.setScriptResults(tempDto.getScriptResults().stream().sorted().toList());
                for(ScriptResultDto result : tempDto.getScriptResults()){
                    for(ScriptResultTableDto table: result.getScriptResultTables()){
                        table.setScriptResultElements(table.getScriptResultElements().stream().sorted().toList());
                    }
                }
                cumulativeTargetServiceDto.setCpe(service.getCpe());
                cumulativeTargetServiceDto.setName(service.getName());
                cumulativeTargetServiceDto.setPort(tempDto.getPort());
                cumulativeTargetServiceDto.setProduct(tempDto.getProduct());
                cumulativeTargetServiceDto.setProtocol(tempDto.getProtocol());
                cumulativeTargetServiceDto.setServicefp(tempDto.getServicefp());
                cumulativeTargetServiceDto.setVersion(tempDto.getVersion());
                cumulativeTargetServiceDto.setId(tempDto.getId());
                cumulativeTargetServiceDto.setState(tempDto.getState());
                cumulativeTargetServiceDto.setOverwrittenName(tempDto.getOverwrittenName());
                tempDto.setSeenOnScanDto(new SeenOnScanDto(service.getSeenOnScan().getId(), service.getSeenOnScan().getProjectRunOrdinal()));
                cumulativeTargetServiceDto.getTargetServiceIterations().add(tempDto);
                cumulativeTargetServiceDto.getSeenOnScanId().add(new SeenOnScanDto(service.getSeenOnScan().getId(), service.getSeenOnScan().getProjectRunOrdinal()));
                cumulativeTargetServiceDto.setLatest(service.getCreated());
                cumulativeTargetServiceDto.setScriptResults(tempDto.getScriptResults());
                cumulativeTargetServiceDtoMap.put(service.getPort(), cumulativeTargetServiceDto);


            }
            if(cumulativeTargetServiceDto.getLatest() == null || cumulativeTargetServiceDto.getLatest().before(service.getCreated())) {
                cumulativeTargetServiceDto.setServiceNotes(tempDto.getServiceNotes());
                if(tempDto.getServicefp()!= null){
                    cumulativeTargetServiceDto.setServicefp(tempDto.getServicefp());
                }
                if((UtilityServiceImpl.TCPWRAPPED.equals(cumulativeTargetServiceDto.getName())
                        || UtilityServiceImpl.UNKNOWN.equals(cumulativeTargetServiceDto.getName()))
                && !UtilityServiceImpl.UNKNOWN.equals(tempDto.getName())){
                    cumulativeTargetServiceDto.setName(tempDto.getName());
                }
            }

        }
        dto.setServices(new ArrayList<>(cumulativeTargetServiceDtoMap.values()));
        for(CumulativeTargetServiceDto cumulativeTargetServiceDto : dto.getServices()) {
            cumulativeTargetServiceDto.setTargetServiceIterations(cumulativeTargetServiceDto.getTargetServiceIterations().stream().sorted().toList());
            for(ScriptResultDto result: cumulativeTargetServiceDto.getScriptResults()){
                for (ScriptResultTableDto table : result.getScriptResultTables())
                    table.setScriptResultElements(table.getScriptResultElements().stream().sorted().toList());
            }
            cumulativeTargetServiceDto.setScriptResults(cumulativeTargetServiceDto.getScriptResults().stream().sorted().toList());
        }
        return dto;
    }

    @Override
    public NmapScanDto getNmapScanById(Long id) throws ChangeSetPersister.NotFoundException {
        return modelMapper.map(nmapScanRepository.findById(id).orElseThrow(ChangeSetPersister.NotFoundException::new), NmapScanDto.class);
    }
}
