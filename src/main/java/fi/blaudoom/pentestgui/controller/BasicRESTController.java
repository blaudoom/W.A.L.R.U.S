package fi.blaudoom.pentestgui.controller;

import fi.blaudoom.pentestgui.GlobalState;
import fi.blaudoom.pentestgui.service.project.TargetAccessService;
import fi.blaudoom.pentestgui.service.project.dto.CumulativeTargetDto;
import fi.blaudoom.pentestgui.service.project.dto.NmapScanDto;
import fi.blaudoom.pentestgui.service.project.dto.ProjectDto;
import fi.blaudoom.pentestgui.service.project.ProjectService;
import fi.blaudoom.pentestgui.service.project.dto.TargetDto;
import fi.blaudoom.pentestgui.service.settings.SettingsService;
import fi.blaudoom.pentestgui.service.utilities.UtilityService;
import fi.blaudoom.pentestgui.service.user.UserService;
import fi.blaudoom.pentestgui.service.utilities.dto.NmapScanRequestDto;
import fi.blaudoom.pentestgui.service.utilities.dto.ScanTypeDto;
import jakarta.servlet.http.HttpServletResponse;
import org.springframework.data.crossstore.ChangeSetPersister;
import org.springframework.http.HttpEntity;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.*;
import org.xml.sax.SAXException;

import javax.xml.parsers.ParserConfigurationException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

@RestController
@CrossOrigin(origins = "*", methods = {RequestMethod.GET, RequestMethod.POST, RequestMethod.PUT}, allowedHeaders = "*")
public class BasicRESTController {

    private final UtilityService utilityService;
    private final SettingsService settingsService;

    private final ProjectService projectService;

    private final GlobalState globalState;

    private final TargetAccessService targetAccessService;


    public BasicRESTController(UserService userService, UtilityService utilityService, SettingsService settingsService, ProjectService projectService, GlobalState globalState, TargetAccessService targetAccessService) {
        this.utilityService = utilityService;
        this.settingsService = settingsService;
        this.projectService = projectService;
        this.globalState = globalState;
        this.targetAccessService = targetAccessService;
    }

    @GetMapping("/api/run/{id}")
    @ResponseBody
    public String runUtility(Model model, @PathVariable String id) {
        String output = "";
        try {
            output = utilityService.runUtility(Long.valueOf(id));
        } catch (InterruptedException e) {
            throw new RuntimeException(e);
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
        return output;
    }

    @GetMapping("/api/nmap/run")
    @ResponseBody
    public Boolean runUtility(Model model) {
        Boolean output = false;
        List<String> addresses = Arrays.asList("localhost");
        List<String> params = Arrays.asList("-sC", "-sT");

        try {
            output = utilityService.runNmap(addresses, params);
        } catch (InterruptedException e) {
            throw new RuntimeException(e);
        } catch (IOException e) {
            throw new RuntimeException(e);
        } catch (ParserConfigurationException e) {
            throw new RuntimeException(e);
        } catch (SAXException e) {
            throw new RuntimeException(e);
        }
        return output;
    }

    @PostMapping(value = "/api/nmap/run", consumes = MediaType.APPLICATION_JSON_VALUE)
    public @ResponseBody ResponseEntity<Boolean> runNmap(@RequestBody NmapScanRequestDto nmapRequest) {
        Boolean output = false;
        List<String> params = new ArrayList<>();
        List<String> addresses = Arrays.stream(nmapRequest.getTarget().split(" ")).toList();
        if (!nmapRequest.getManualOverride()) {
            params = getParams(nmapRequest);
        }
        try {
            output = utilityService.runNmap(addresses, params);
        } catch (InterruptedException e) {
            throw new RuntimeException(e);
        } catch (IOException e) {
            throw new RuntimeException(e);
        } catch (ParserConfigurationException e) {
            throw new RuntimeException(e);
        } catch (SAXException e) {
            throw new RuntimeException(e);
        }
        return ResponseEntity.ok(output);
    }

    private List<String> getParams(NmapScanRequestDto nmapRequest) {
        List<String> params = new ArrayList<>();
        if (nmapRequest.getDefaultScan()) {
            params.addAll(Arrays.stream(settingsService.getSetting("defaultScan").getValue().split(" ")).toList());
        } else {
            if (nmapRequest.getVerbosity() != null
                    && nmapRequest.getVerbosity().getVal() != null
                    && nmapRequest.getVerbosity().getVal() != "") {
                params.add(nmapRequest.getVerbosity().getVal());
            }
            for (ScanTypeDto dto : nmapRequest.getScanType()) {
                if (dto.getVal() != null) {
                    params.add(dto.getVal());
                }
            }
            if (nmapRequest.getDefaultScriptScan()) {
                params.add("-sC");
            }
            if (nmapRequest.getAssumeUp()) {
                params.add("-Pn");
            }
            if (nmapRequest.getVersionDetection()) {
                params.add("-sV");
            }
        }

        return params;
    }

    @GetMapping("/api/settings/")
    @ResponseBody
    public ResponseEntity<?> getSettings() {
        return ResponseEntity.ok(settingsService.listSettings());
    }

    @GetMapping("/api/settings/:name")
    @ResponseBody
    public ResponseEntity<?> getSettingByName(String name) {
        return ResponseEntity.ok(settingsService.getSetting(name));
    }

    @GetMapping(value = "/api/project/active", produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseBody
    public ResponseEntity<?> getActiveProject() {
        Long projectId = globalState.getCurrentProject();
        ProjectDto project = projectService.getProject(projectId);
        return ResponseEntity.ok(project);
    }

    @PutMapping(value = "/api/project/active", produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseBody
    public ResponseEntity<?> setActiveProject(@RequestBody Long id) {
        globalState.setCurrentProject(id);
        return ResponseEntity.ok("OK");
    }

    @GetMapping(value = "/api/target/{id}", produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseBody
    public ResponseEntity<?> getTargetInfo(@PathVariable Long id) throws ChangeSetPersister.NotFoundException {
        CumulativeTargetDto dto = targetAccessService.getTargetById(id);

        return ResponseEntity.ok(dto);
    }

    //add get endpoint to retrieve nampscandto by id
    @GetMapping(value = "/api/nmapscan/{id}", produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseBody
    public ResponseEntity<?> getNmapScanInfo(@PathVariable Long id) throws ChangeSetPersister.NotFoundException {
        NmapScanDto dto = targetAccessService.getNmapScanById(id);

        return ResponseEntity.ok(dto);
    }
}


