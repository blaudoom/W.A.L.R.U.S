package fi.blaudoom.pentestgui.controller;

import fi.blaudoom.pentestgui.GlobalState;
import fi.blaudoom.pentestgui.service.project.TargetAccessService;
import fi.blaudoom.pentestgui.service.project.dto.ProjectDto;
import fi.blaudoom.pentestgui.service.project.ProjectService;
import fi.blaudoom.pentestgui.service.project.dto.TargetDto;
import fi.blaudoom.pentestgui.service.settings.SettingsService;
import fi.blaudoom.pentestgui.service.utilities.UtilityService;
import fi.blaudoom.pentestgui.service.user.UserService;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;
import org.xml.sax.SAXException;

import javax.xml.parsers.ParserConfigurationException;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

@RestController
public class BasicRESTController {

    private final UtilityService utilityService;
    private final SettingsService settingsService;

    private final ProjectService projectService;

    private final GlobalState globalState;

    private final TargetAccessService targetAccessService;

    public BasicRESTController(UserService userService, UtilityService utilityService, SettingsService settingsService, ProjectService projectService, GlobalState globalState, TargetAccessService targetAccessService) {
        this.utilityService = utilityService;
        this.settingsService = settingsService;
        this.projectService = projectService;
        this.globalState = globalState;
        this.targetAccessService = targetAccessService;
    }
    @GetMapping("/api/run/{id}")
    @ResponseBody
    public String runUtility(Model model, @PathVariable String id){
        String output = "";
        try {
            output = utilityService.runUtility(Long.valueOf(id));
        } catch (InterruptedException e) {
            throw new RuntimeException(e);
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
        return output;
    }
    @GetMapping("/api/nmap/run")
    @ResponseBody
    public Boolean runUtility(Model model){
        Boolean output = false;
        List<String> addresses = Arrays.asList("localhost");
        List<String> params = Arrays.asList("-sV","-sC","-sT");

        try {
            output = utilityService.runNmap(addresses,params);
        } catch (InterruptedException e) {
            throw new RuntimeException(e);
        } catch (IOException e) {
            throw new RuntimeException(e);
        } catch (ParserConfigurationException e) {
            throw new RuntimeException(e);
        } catch (SAXException e) {
            throw new RuntimeException(e);
        }
        return output;
    }
    @GetMapping("/api/settings")
    @ResponseBody
    public ResponseEntity<?> getSettings(){
        return ResponseEntity.ok(settingsService.listSettings());
    }

    @GetMapping(value = "/api/project/active", produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseBody
    public ResponseEntity<?> getActiveProject(){
        Long projectId = globalState.getCurrentProject();
        ProjectDto project = projectService.getProject(projectId);
        return ResponseEntity.ok(project);
    }

    @GetMapping(value = "/api/target/{id}", produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseBody
    public ResponseEntity<?> getTargetInfo(@PathVariable Long id){
        TargetDto dto = targetAccessService.getTargetById(id);

        return ResponseEntity.ok(dto);
    }

}


